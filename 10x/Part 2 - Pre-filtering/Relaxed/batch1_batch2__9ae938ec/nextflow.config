manifest {
   name = 'vib-singlecell-nf/vsn-pipelines'
   description = 'A repository of pipelines for single-cell data in Nextflow DSL2'
   homePage = 'https://github.com/vib-singlecell-nf/vsn-pipelines'
   version = '0.19.0'
   mainScript = 'main.nf'
   defaultBranch = 'master'
   nextflowVersion = '!20.04.1'
}

params {
   misc {
      test {
         enabled = false
      }
   }
   global {
      project_name = 'FCA_Biohub_All_single_sample_scrublet'
      outdir = 'out'
      qsubaccount = ''
      qsubemail = ''
   }
   sc {
      scanpy {
         container = 'vibsinglecellnf/scanpy:0.5.0'
         report {
            annotations_to_plot = []
         }
         feature_selection {
            report_ipynb = '/src/scanpy/bin/reports/sc_select_variable_genes_report.ipynb'
            method = 'mean_disp_plot'
            minMean = 0.0125
            maxMean = 3
            minDisp = 0.5
            off = 'h5ad'
         }
         feature_scaling {
            method = 'zscore_scale'
            maxSD = 10
            off = 'h5ad'
         }
         neighborhood_graph {
            nPcs = 50
            off = 'h5ad'
         }
         dim_reduction {
            report_ipynb = '/src/scanpy/bin/reports/sc_dim_reduction_report.ipynb'
            pca {
               method = 'pca'
               nComps = 50
               off = 'h5ad'
            }
            umap {
               method = 'umap'
               off = 'h5ad'
            }
            tsne {
               method = 'tsne'
               nJobs = 10
               off = 'h5ad'
            }
         }
         clustering {
            report_ipynb = '/src/scanpy/bin/reports/sc_clustering_report.ipynb'
            method = 'louvain'
            resolution = 0.8
            off = 'h5ad'
         }
         marker_genes {
            method = 'wilcoxon'
            ngenes = 0
            groupby = 'louvain'
            off = 'h5ad'
         }
         filter {
            report_ipynb = '/src/scanpy/bin/reports/sc_filter_qc_report.ipynb'
            cellFilterMinNGenes = 200
            cellFilterMaxPercentMito = 0.15
            geneFilterMinNCells = 3
            off = 'h5ad'
            outdir = 'out'
         }
         data_transformation {
            method = 'log1p'
            off = 'h5ad'
         }
         normalization {
            method = 'cpx'
            countsPerCellAfter = 10000
            off = 'h5ad'
         }
      }
      scrublet {
         container = 'vibsinglecellnf/scrublet:0.1.3'
         labels {
            processExecutor = 'local'
         }
         doublet_detection {
            report_ipynb = '/src/scrublet/bin/reports/sc_doublet_detection_report.ipynb'
            useVariableFeatures = 'True'
            technology = '10x'
            off = 'h5ad'
         }
         cell_annotate {
            off = 'h5ad'
            method = 'obo'
            indexColumnName = 'index'
         }
         cell_filter {
            off = 'h5ad'
            method = 'internal'
            filters = [[id:'NO_DOUBLETS', sampleColumnName: 'sample_id', filterColumnName:'scrublet__predicted_doublets_based_on_10x_chromium_spec', valuesToKeepFromFilterColumn:['False']]]
         }
      }
      scope {
         genome = ''
         tree {
            level_1 = 'All'
            level_2 = '9ae938ec'
            level_3 = ''
         }
      }
      file_converter {
         tagCellWithSampleId = true
         useFilteredMatrix = true
         makeVarIndexUnique = false
      }
   }
   data {
      tenx {
         cellranger_mex = [
            "./../../Part 1 - Index Hopping Filtering and Cell Ranger/cell_ranger/batch1/out/counts/*/outs",
            "./../../Part 1 - Index Hopping Filtering and Cell Ranger/cell_ranger/batch2/out/counts/*/outs"
         ]
      }
   }
   utils {
      container = 'vibsinglecellnf/utils:0.3.0'
      workflow_configuration {
         report_ipynb = '/src/utils/bin/reports/workflow_configuration_template.ipynb'
      }
      publish {
         compressionLevel = 9
      }
   }
   parseConfig = { sample, paramsGlobal, paramsLocal ->
         def lv = { a,b -> return org.codehaus.groovy.runtime.MethodRankHelper.delDistance(a, b) }
         def pL = paramsLocal.collectEntries { k,v ->
            if (v instanceof Map) {
               if (v.containsKey(sample))
                  return [k, v[sample]]
               if (v.containsKey('default'))
                  return [k, v['default']]
               def closeMatches = v.collectEntries { vk, vv -> [lv(vk, sample), vk] }.keySet().findAll { it < 30}
               if(closeMatches.size() > 0)
                  throw new Exception("The sample " + sample + " is not found in " + v +" ; Make sure your samples are correctly specified when using the multi-sample feature.")
               else
                  return [k,v]
            } else {
               return [k,v]
         }
      }
      return [global: paramsGlobal, local: pL]
   }
}

process {
   maxForks = 2
   executor = 'local'
   withLabel:qsub {
      executor = 'pbs'
   }
   withLabel:local {
      executor = 'local'
   }
}

timeline {
   enabled = true
   file = 'out/nextflow_reports/execution_timeline.html'
}

report {
   enabled = true
   file = 'out/nextflow_reports/execution_report.html'
}

trace {
   enabled = true
   file = 'out/nextflow_reports/execution_trace.txt'
}

dag {
   enabled = true
   file = 'out/nextflow_reports/pipeline_dag.svg'
}

min {
   enabled = false
}

singularity {
   enabled = true
   autoMounts = true
   runOptions = '-B /ddn1/vol1/staging/leuven/stg_00002/,/staging/leuven/stg_00002/'
}

