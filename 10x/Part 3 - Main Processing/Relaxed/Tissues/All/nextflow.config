manifest {
   name = 'vib-singlecell-nf/vsn-pipelines'
   description = 'A repository of pipelines for single-cell data in Nextflow DSL2'
   homePage = 'https://github.com/vib-singlecell-nf/vsn-pipelines'
   version = '0.19.0'
   mainScript = 'main.nf'
   defaultBranch = 'master'
   nextflowVersion = '!20.04.1'
}

params {
   misc {
      test {
         enabled = false
      }
   }
   global {
      project_name = 'FCA_BioHub_B1_B2_B3_B4_All'
      outdir = 'out'
      qsubaccount = 'lp_symbiosys'
      qsubemail = 'maxime.dewaegeneer@kuleuven.vib.be'
      species = 'fly'
      genome {
         assembly = 'dm6'
      }
   }
   sc {
      file_concatenator {
         join = 'outer'
         off = 'h5ad'
      }
      scanpy {
         container = 'vibsinglecellnf/scanpy:0.5.0'
         report {
            annotations_to_plot = ["batch_id","fca_id","fly_genetics","sex","tissue","age","dissection_lab","note"]
         }
         feature_selection {
            report_ipynb = '/src/scanpy/bin/reports/sc_select_variable_genes_report.ipynb'
            method = 'mean_disp_plot'
            minMean = 0.0125
            maxMean = 3
            minDisp = 0.5
            off = 'h5ad'
         }
         feature_scaling {
            method = 'zscore_scale'
            maxSD = 10
            off = 'h5ad'
         }
         neighborhood_graph {
            off = 'h5ad'
         }
         dim_reduction {
            report_ipynb = '/src/scanpy/bin/reports/sc_dim_reduction_report.ipynb'
            pca {
               method = 'pca'
               off = 'h5ad'
            }
            umap {
               method = 'umap'
               off = 'h5ad'
            }
            tsne {
               method = 'tsne'
               nJobs = 16
               off = 'h5ad'
            }
         }
         clustering {
            report_ipynb = '/src/scanpy/bin/reports/sc_clustering_report.ipynb'
            method = 'leiden'
            resolutions = [0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2,4,6,8,10,12,14,16,18,20,25,50]
            off = 'h5ad'
         }
         marker_genes {
            method = 'wilcoxon'
            ngenes = 0
            off = 'h5ad'
         }
         filter {
            report_ipynb = '/src/scanpy/bin/reports/sc_filter_qc_report.ipynb'
            cellFilterMinNGenes = 200
            cellFilterMaxPercentMito = 0.15
            geneFilterMinNCells = 3
            off = 'h5ad'
            outdir = 'out'
         }
         data_transformation {
            method = 'log1p'
            off = 'h5ad'
         }
         normalization {
            method = 'cpx'
            countsPerCellAfter = 10000
            off = 'h5ad'
         }
      }
      harmony {
         container = 'vibsinglecellnf/harmony:1.0'
         report_ipynb = '/src/harmony/bin/reports/sc_harmony_report.ipynb'
         varsUse = ['batch']
      }
      directs {
         container = 'vibsinglecellnf/directs:0.1.0'
         labels {
            processExecutor = 'local'
         }
         select_default_clustering {
            fromMinClusterSize = 5
            toMinClusterSize = 100
            byMinClusterSize = 5
            fromMinSamples = 5
            toMinSamples = 100
            byMinSamples = 5
         }
      }
      file_converter {
         iff = 'h5ad'
         tagCellWithSampleId = false
         useFilteredMatrix = true
         makeVarIndexUnique = false
      }
      sample_annotate {
         iff = '10x_cellranger_mex'
         off = 'h5ad'
         type = 'sample'
         metadataFilePath = '../../../../fca_biohub_sample_metadata.tsv'
         sampleColumnName = 'id'
      }
      scope {
         genome = 'Flybase r6.31 pre-mRNA v3.1'
         tree {
            level_1 = 'All'
            level_2 = '486442cc'
            level_3 = ''
         }
      }
   }
   data {
      h5ad {
         file_paths = [
            "../../../Part 2 - Pre-filtering/batch1_batch2__9ae938ec/out/data/scrublet/*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch3__633316f6/out/data/scrublet/*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*fatbody*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*haltere*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*proboscis*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*oenocyte*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/FCA53__c6d22f96/out/data/scrublet/*oenocyte*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*antenna*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*Trachea*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*ovary*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad",
            "../../../Part 2 - Pre-filtering/batch4__244cd902/out/data/scrublet/*testis*.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad"
         ]
         suffix = '.SCRUBLET.SC__APPLY_OBS_FILTER.h5ad'
      }
   }
   pcacv {
      container = 'vibsinglecellnf/pcacv:0.2.0'
      find_optimal_npcs {
         accessor = '@assays$RNA@scale.data'
      }
   }
   utils {
      container = 'vibsinglecellnf/utils:0.3.0'
      workflow_configuration {
         report_ipynb = '/src/utils/bin/reports/workflow_configuration_template.ipynb'
      }
      publish {
         compressionLevel = 9
      }
   }
   parseConfig = { sample, paramsGlobal, paramsLocal ->
         def lv = { a,b -> return org.codehaus.groovy.runtime.MethodRankHelper.delDistance(a, b) }
         def pL = paramsLocal.collectEntries { k,v ->
            if (v instanceof Map) {
               if (v.containsKey(sample))
                  return [k, v[sample]]
               if (v.containsKey('default'))
                  return [k, v['default']]
               def closeMatches = v.collectEntries { vk, vv -> [lv(vk, sample), vk] }.keySet().findAll { it < 30}
               if(closeMatches.size() > 0)
                  throw new Exception("The sample " + sample + " is not found in " + v +" ; Make sure your samples are correctly specified when using the multi-sample feature.")
               else
                  return [k,v]
            } else {
               return [k,v]
         }
      }
      return [global: paramsGlobal, local: pL]
   }
}

process {
   maxForks = 2
   executor = 'local'
   withLabel:'compute_resources__.*|compute_resources__default' {
      cpus = 2
   }
   withLabel:compute_resources__minimal {
      cpus = 1
   }
   withLabel:compute_resources__mem {
      cpus = 1
   }
   withLabel:compute_resources__cpu {
      cpus = 20
   }
   withLabel:compute_resources__24hqueue {
      time = '24h'
   }
   withLabel:compute_resources__pcacv {
      cpus = 20
   }
   withLabel:'compute_resources__report' {
      maxForks = 2
      cpus = 1
   }
}

timeline {
   enabled = true
   file = 'out/nextflow_reports/execution_timeline.html'
}

report {
   enabled = true
   file = 'out/nextflow_reports/execution_report.html'
}

trace {
   enabled = true
   file = 'out/nextflow_reports/execution_trace.txt'
}

dag {
   enabled = true
   file = 'out/nextflow_reports/pipeline_dag.svg'
}

min {
   enabled = false
}

singularity {
   enabled = true
   autoMounts = true
   runOptions = '-B /ddn1/vol1/staging/leuven/stg_00002/,/staging/leuven/stg_00002/ -B /ddn1/vol1/site_scratch/leuven/313/vsc31325/'
}
