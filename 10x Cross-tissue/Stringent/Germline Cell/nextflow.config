manifest {
   name = 'vib-singlecell-nf/vsn-pipelines'
   description = 'A repository of pipelines for single-cell data in Nextflow DSL2'
   homePage = 'https://github.com/vib-singlecell-nf/vsn-pipelines'
   version = '0.25.0'
   mainScript = 'main.nf'
   defaultBranch = 'master'
   nextflowVersion = '>=20.04.1'
}

params {
   misc {
      test {
         enabled = false
      }
   }
   global {
      project_name = 'FCA_BioHub_B1234_GermlineCell_CT'
      outdir = 'out'
      qsubaccount = ''
      qsubemail = ''
      species = 'fly'
      genome {
         assembly = 'dm6'
      }
      seed = 190
   }
   sc {
      scanpy {
         container = 'vibsinglecellnf/scanpy:0.5.0'
         report {
            annotations_to_plot = ["batch_id","fca_id","fly_genetics","sex","tissue","age"]
         }
         feature_selection {
            report_ipynb = '/src/scanpy/bin/reports/sc_select_variable_genes_report.ipynb'
            method = 'mean_disp_plot'
            minMean = 0.0125
            maxMean = 3
            minDisp = 0.5
            off = 'h5ad'
         }
         feature_scaling {
            method = 'zscore_scale'
            maxSD = 10
            off = 'h5ad'
         }
         neighborhood_graph {
            off = 'h5ad'
         }
         dim_reduction {
            report_ipynb = '/src/scanpy/bin/reports/sc_dim_reduction_report.ipynb'
            pca {
               method = 'pca'
               off = 'h5ad'
            }
            umap {
               method = 'umap'
               off = 'h5ad'
            }
            tsne {
               method = 'tsne'
               nJobs = 10
               off = 'h5ad'
            }
         }
         clustering {
            report_ipynb = '/src/scanpy/bin/reports/sc_clustering_report.ipynb'
            method = 'leiden'
            resolutions = [0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2,4,6,8,10]
            off = 'h5ad'
         }
         marker_genes {
            method = 'wilcoxon'
            ngenes = 0
            off = 'h5ad'
         }
         filter {
            report_ipynb = '/src/scanpy/bin/reports/sc_filter_qc_report.ipynb'
            cellFilterStrategy = 'fixedthresholds'
            cellFilterMinNGenes = 0
            cellFilterMinNCounts = 0
            cellFilterMaxPercentMito = 1
            geneFilterMinNCells = 3
            off = 'h5ad'
            outdir = 'out'
         }
         data_transformation {
            method = 'log1p'
            off = 'h5ad'
         }
         normalization {
            method = 'cpx'
            countsPerCellAfter = 10000
            off = 'h5ad'
         }
         regress_out {
            variablesToRegressOut = ['n_counts', 'percent_mito']
            off = 'h5ad'
         }
      }
      harmony {
         container = 'vibsinglecellnf/harmony:1.0-1'
         report_ipynb = '/src/harmony/bin/reports/sc_harmony_report.ipynb'
         varsUse = ['fca_id']
      }
      directs {
         container = 'vibsinglecellnf/directs:0.1.0'
         select_default_clustering {
            cellEmbeddingsIndex = 0
            fromMinClusterSize = 5
            toMinClusterSize = 100
            byMinClusterSize = 5
            fromMinSamples = 5
            toMinSamples = 100
            byMinSamples = 5
         }
      }
      file_converter {
         iff = 'h5ad'
         tagCellWithSampleId = false
         useFilteredMatrix = true
         makeVarIndexUnique = false
      }
      scope {
         genome = 'Flybase r6.31 pre-mRNA v3.1'
         tree {
            level_1 = 'Germline Cell'
            level_2 = '772d0bfa'
            level_3 = ''
         }
      }
   }
   data {
      h5ad {
         file_paths = [
            "FCA_BioHub_B1_B2_B3_B4_All.germline_cell.h5ad",
         ]
         suffix = '.h5ad'
      }
   }
   pcacv {
      container = 'vibsinglecellnf/pcacv:0.2.0'
      find_optimal_npcs {
         accessor = '@assays$RNA@scale.data'
      }
   }
   utils {
      container = 'vibsinglecellnf/utils:0.3.0'
      workflow_configuration {
         report_ipynb = '/src/utils/bin/reports/workflow_configuration_template.ipynb'
      }
      publish {
         compressionLevel = 9
         annotateWithBatchVariableName = true
      }
   }
}

process {
   executor = 'local'
   withLabel:'compute_resources__.*|compute_resources__default' {
      cpus = 2
      clusterOptions = '-A <account_string>'
   }
   withLabel:compute_resources__minimal {
      cpus = 1
   }
   withLabel:compute_resources__mem {
      cpus = 1
   }
   withLabel:compute_resources__cpu {
      cpus = 16
      memory = '60 GB'
   }
   withLabel:compute_resources__report {
      maxForks = 2
      cpus = 1
   }
   withLabel:compute_resources__24hqueue {
      time = '24h'
   }
   withLabel:compute_resources__pcacv {
      cpus = 16
   }
   afterScript = {
      // Source: https://github.com/nextflow-io/nextflow/issues/1166#issuecomment-502467562
      logMainDir = params.logDir

      // Check whether log dir is located in S3 if using awsbatch and is a local directory otherwise
      if (workflow.profile == "aws") {
         if (!logMainDir.matches("^s3://.*")) logMainDir = "s3:/" + workflow.workDir.toString() + "/log"
      } else {
         logMainDir = workflow.launchDir.resolve(logMainDir).toString()
         if (!logMainDir.matches("^/.*")) logMainDir = workflow.launchDir.toString() + "/log"
      }

      // Build log directory path based on task name
      logSubDir = task.name.replace(" (null)", "").replace(" ", "/").replaceAll(" ", "_").replaceAll("[()]", "")
      logDir = logMainDir + "/" + logSubDir

      // Define command to copy log files
      cpLogCmd = workflow.profile == "aws" ?
         "nxf_s3_upload '*.txt' ${logDir}; " :
         "mkdir -p ${logDir}; cp -a *.txt ${logDir}; "

      // Assemble final command
      cmd = "ls -alR --full-time > .command.ls; "
      cmd += "mkdir nxf_log; "
      cmd += "for file in .command.*; do cp -a \${file} nxf_log/\${file#.}.txt; done; "
      cmd += "cd nxf_log; "
      cmd += cpLogCmd
      cmd += "cd ..;"
      cmd
   }
}

timeline {
   enabled = true
   file = 'out/nextflow_reports/execution_timeline.html'
}

report {
   enabled = true
   file = 'out/nextflow_reports/execution_report.html'
}

trace {
   enabled = true
   file = 'out/nextflow_reports/execution_trace.txt'
}

dag {
   enabled = true
   file = 'out/nextflow_reports/pipeline_dag.svg'
}

min {
   enabled = false
}

singularity {
   enabled = true
   autoMounts = true
   runOptions = '-B /ddn1/vol1/staging/leuven/stg_00002/,/staging/leuven/stg_00002/ -B /ddn1/vol1/site_scratch/leuven/313/vsc31325/'
}

